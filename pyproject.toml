[build-system]
requires = ["scikit-build-core"]
build-backend = "scikit_build_core.build"

[project]
name = "ninja"
dynamic = ["version", "readme"]
description = "Ninja is a small build system with a focus on speed"
authors = [
    { name = "Jean-Christophe Fillion-Robin", email = "scikit-build@googlegroups.com" },
    { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
keywords = [
    "build",
    "c++",
    "cross-compilation",
    "cross-platform",
    "fortran",
    "ninja",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Fortran",
    "Programming Language :: Python",
    "Topic :: Software Development :: Build Tools",
    "Typing :: Typed",
]

[project.optional-dependencies]
test = [
    "coverage>=4.2",
    "importlib_metadata>=2.0",
    "pytest-cov>=2.7.1",
    "pytest>=4.5.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/scikit-build/ninja-python-distributions/issues"
Documentation = "https://github.com/scikit-build/ninja-python-distributions#readme"
Download = "https://github.com/ninja-build/ninja/releases"
Homepage = "http://ninja-build.org/"
"Mailing list" = "https://groups.google.com/forum/#!forum/scikit-build"
"Source Code" = "https://github.com/scikit-build/ninja-python-distributions"

[tool.scikit-build]
minimum-version = "0.9"
build-dir = "build/{wheel_tag}"
wheel.py-api = "py2.py3"
wheel.expand-macos-universal-tags = true
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
metadata.readme.provider = "scikit_build_core.metadata.fancy_pypi_readme"
install.components = ["python"]


[[tool.scikit-build.generate]]
path = "ninja/_version.py"
template = '''
version = "${version}"
'''

[tool.setuptools_scm]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "HISTORY.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = ".. :changelog:"
replacement = ""


[tool.cibuildwheel]
build = "cp39-*"
build-verbosity = 1
test-extras = "test"
test-command = "pytest {project}/tests"
test-skip = ["*-win_arm64", "*-macosx_universal2:arm64"]
environment-pass = ["SETUPTOOLS_SCM_PRETEND_VERSION"]

[[tool.cibuildwheel.overrides]]
select = "*-manylinux_{x86_64,i686}"
manylinux-x86_64-image = "manylinux2010"
manylinux-i686-image = "manylinux2010"
environment = { LDFLAGS = "-static-libstdc++" }

[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = "10.9"

[[tool.cibuildwheel.overrides]]
select = "*-musllinux_*"
environment = { LDFLAGS = "-static-libstdc++ -static-libgcc" }

[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "RUF005", # Python 3 needed
  "B904",   # Python 3 needed
#  "SIM105", # Python 3 needed
]
flake8-unused-arguments.ignore-variadic-names = true

[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["ARG001"]
"noxfile.py" = ["PLW0603"] # Could be fixed if Python 2 dropped

[tool.pytest.ini_config]
testpaths = ["tests"]
addopts = ["-v", "--cov", "--cov-report", "xml"]
