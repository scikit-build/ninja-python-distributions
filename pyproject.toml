[build-system]
requires = ["scikit-build-core>=0.10"]
build-backend = "backend"
backend-path = ["_build_backend"]

[project]
name = "ninja"
dynamic = ["version", "readme"]
description = "Ninja is a small build system with a focus on speed"
authors = [
    { name = "Jean-Christophe Fillion-Robin", email = "scikit-build@googlegroups.com" },
    { name = "Henry Schreiner", email = "henryfs@princeton.edu" },
]
keywords = [
    "build",
    "c++",
    "cross-compilation",
    "cross-platform",
    "fortran",
    "ninja",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: C",
    "Programming Language :: C++",
    "Programming Language :: Fortran",
    "Programming Language :: Python",
    "Topic :: Software Development :: Build Tools",
    "Typing :: Typed",
]
requires-python = ">=3.7"

[project.optional-dependencies]
test = [
    "coverage>=4.2",
    "importlib_metadata>=2.0",
    "pytest-cov>=3",
    "pytest>=6.0",
]

[project.urls]
"Bug Tracker" = "https://github.com/scikit-build/ninja-python-distributions/issues"
Documentation = "https://github.com/scikit-build/ninja-python-distributions#readme"
Download = "https://github.com/ninja-build/ninja/releases"
Homepage = "http://ninja-build.org/"
"Mailing list" = "https://groups.google.com/forum/#!forum/scikit-build"
"Source Code" = "https://github.com/scikit-build/ninja-python-distributions"

[tool.scikit-build]
minimum-version = "build-system.requires"
cmake.version = "CMakeLists.txt"  # Force parsing version from CMakeLists.txt and disable fallback to '>=3.15'
ninja.make-fallback = true
build-dir = "build/{wheel_tag}"
wheel.py-api = "py3"
wheel.expand-macos-universal-tags = true
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
metadata.readme.provider = "scikit_build_core.metadata.fancy_pypi_readme"
install.components = ["python"]


[[tool.scikit-build.generate]]
path = "ninja/_version.py"
template = '''
version = "${version}"
'''

[tool.setuptools_scm]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "HISTORY.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = ".. :changelog:"
replacement = ""


[tool.cibuildwheel]
build = "cp39-*"
build-frontend = "build[uv]"
build-verbosity = 1
test-extras = "test"
test-command = "pytest {project}/tests"
test-skip = ["*-win_arm64", "*-macosx_universal2:arm64"]
environment = { NINJA_PYTHON_DIST_ALLOW_NINJA_DEP = "1" }
environment-pass = ["SETUPTOOLS_SCM_PRETEND_VERSION"]
musllinux-x86_64-image = "musllinux_1_1"
musllinux-i686-image = "musllinux_1_1"
musllinux-aarch64-image = "musllinux_1_1"
musllinux-ppc64le-image = "musllinux_1_1"
musllinux-s390x-image = "musllinux_1_1"
musllinux-armv7l-image = "musllinux_1_2"

[[tool.cibuildwheel.overrides]]
select = "*-macos*"
inherit.environment = "append"
environment = { MACOSX_DEPLOYMENT_TARGET = "10.9" }

[[tool.cibuildwheel.overrides]]
select = "*-manylinux_{x86_64,i686}"
manylinux-x86_64-image = "manylinux2010"
manylinux-i686-image = "manylinux2010"
build-frontend = "pip"
inherit.environment = "append"
environment = { LDFLAGS = "-static-libstdc++" }
inherit.test-command = "prepend"
test-command = "pip check"

[[tool.cibuildwheel.overrides]]
select = "*-musllinux_*"
inherit.environment = "append"
environment = { LDFLAGS = "-static-libstdc++ -static-libgcc" }

[[tool.cibuildwheel.overrides]]
select = "*-musllinux_s390x"
build-frontend = "pip"
inherit.test-command = "prepend"
test-command = "pip check"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "info"
testpaths = [ "tests" ]


[tool.mypy]
warn_unused_configs = true
files = "src"
python_version = "3.8"
strict = true
enable_error_code = ["ignore-without-code", "truthy-bool", "redundant-expr"]
warn_unreachable = true


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "ARG",         # flake8-unused-arguments
  "B",           # flake8-bugbear
  "C4",          # flake8-comprehensions
  "EXE",         # flake8-executable
  "G",           # flake8-logging-format
  "I",           # isort
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "UP",          # pyupgrade
]
ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
]
isort.required-imports = ["from __future__ import annotations"]
flake8-unused-arguments.ignore-variadic-names = true

[tool.ruff.lint.per-file-ignores]
"*.pyi" = ["ARG001"]

[tool.pytest.ini_config]
testpaths = ["tests"]
addopts = ["-v", "--cov", "--cov-report", "xml"]
